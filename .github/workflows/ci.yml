name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        ruff check openworld_methane/ tests/
        black --check openworld_methane tests
        
    - name: Run type checking
      run: |
        mypy openworld_methane/
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=openworld_methane --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit safety
        
    - name: Run security scan with bandit
      run: |
        bandit -r openworld_methane/ -f json -o bandit-report.json || true
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        
  integration:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        owm --help
        
        # Test data simulation
        owm simulate test_data.json --rows 100
        
        # Test analysis
        owm analyze test_data.json --z 3.0
        
        # Test aggregation
        owm aggregate test_data.json --window 1h
        
        # Test dashboard
        timeout 5s owm dashboard test_data.json || true
        
        # Test configuration
        owm config --help
        
    - name: Test with sample data
      run: |
        # Create sample configuration
        cat > test_config.toml << EOF
        environment = "test"
        
        [storage]
        backend = "jsonl"
        jsonl_path = "test_emissions.jsonl"
        
        [analytics]
        anomaly_method = "robust_z"
        anomaly_z_threshold = 2.5
        EOF
        
        # Test with configuration
        owm config --file test_config.toml
        
        # Test JSONL operations
        owm log test_data.json test_emissions.jsonl
        owm query test_emissions.jsonl --start 2024-01-01T00:00:00Z